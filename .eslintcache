[{"A:\\w\\nolexa\\src\\index.tsx":"1","A:\\w\\nolexa\\src\\Wrapper.tsx":"2","A:\\w\\nolexa\\src\\App.tsx":"3","A:\\w\\nolexa\\src\\encrypt.tsx":"4"},{"size":226,"mtime":1609708894055,"results":"5","hashOfConfig":"6"},{"size":406,"mtime":1609724253373,"results":"7","hashOfConfig":"6"},{"size":3388,"mtime":1609725079673,"results":"8","hashOfConfig":"6"},{"size":1028,"mtime":1609724277564,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"h61xis",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"A:\\w\\nolexa\\src\\index.tsx",[],["20","21"],"A:\\w\\nolexa\\src\\Wrapper.tsx",[],"A:\\w\\nolexa\\src\\App.tsx",["22","23","24"],"import React, { useEffect, useState } from \"react\";\nimport { cipher, decipher, salt, encodeVoice, decodeVoice } from \"./encrypt\";\nimport img from \"./assets/robot-01-icon.png\";\n\nexport const App = (props: any) => {\n\tconst { code } = props.match.params;\n\tconst myCipher = cipher(salt);\n\tconst myDecipher = decipher(salt);\n\tconst url = \"https://nps.nolexa.surge.sh/\";\n\n\tconst synth = window.speechSynthesis;\n\tconst [voice, setVoice] = useState(\n\t\t!!code ? decodeVoice(code.substring(0, 1)) : 13\n\t);\n\tconst [text, setText] = useState(\n\t\tcode === undefined ? \"\" : myDecipher(code.slice(1))\n\t);\n\tconst [voices, setVoices] = useState(Array<SpeechSynthesisVoice>());\n\n\tuseEffect(() => {\n\t\tgetVoices();\n\t\tif (!!code && code !== \"\") {\n\t\t\tspeakFunction();\n\t\t\tsetTimeout(() => speakFunction(), 666);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tfor (let i: number = 0; i < voices.length; i++) {\n\t\t\t//console.log(\"Setting default voice\");\n\t\t\tif (voices[i].lang.includes(\"ja-JP\")) {\n\t\t\t\t//console.log(i);\n\t\t\t\tsetVoice(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!synth.speaking) speakFunction();\n\t}, [voices]);\n\n\tconst getVoices = async () => setVoices(await synth.getVoices());\n\n\tconst speakFunction = () => {\n\t\t//console.log(voice);\n\t\tif (text === \"\") return;\n\t\t//check if speaking\n\t\tif (synth.speaking) {\n\t\t\tconsole.error(\"Already speaking, wait!\");\n\t\t\treturn;\n\t\t}\n\t\tlet speakText = new SpeechSynthesisUtterance(text);\n\t\t//speak error\n\t\tspeakText.onerror = (e) => {\n\t\t\tconsole.error(\"something went wrong\");\n\t\t};\n\n\t\t//loop through voices to find selectedVoice\n\t\tspeakText.voice = voices[voice];\n\n\t\t//speak\n\t\tsynth.speak(speakText);\n\t};\n\n\tconst copyCode = () => {\n\t\tnavigator.clipboard.writeText(url + encodeVoice(voice) + myCipher(text));\n\t\talert(\"Copied to clipboard, send it to someone!\");\n\t};\n\n\treturn (\n\t\t<div className='container row'>\n\t\t\t<h1 className=' center\t'>Nolexa</h1>\n\t\t\t<div className='center'>\n\t\t\t\t<img className='responsive-img' src={img} style={{ maxHeight: 400 }} />\n\t\t\t</div>\n\t\t\t<div className='col s12'>\n\t\t\t\t<input\n\t\t\t\t\tstyle={{ color: \"white\" }}\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='text'\n\t\t\t\t\tvalue={text}\n\t\t\t\t\tonChange={(event) => setText(event.target.value)}\n\t\t\t\t\tplaceholder={\"Type something\"}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className='col s12'>\n\t\t\t\t<select\n\t\t\t\t\tvalue={voice}\n\t\t\t\t\tonChange={(event) => setVoice(Number(event.target.value))}\n\t\t\t\t\tclassName='browser-default'\n\t\t\t\t>\n\t\t\t\t\t{voices.length > 0 &&\n\t\t\t\t\t\tvoices.map(function (v, i) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<option key={i} value={i}>\n\t\t\t\t\t\t\t\t\t{v.name} ({v.lang})\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div className='row container col s12 center' style={{ marginTop: 20 }}>\n\t\t\t\t<div className='col s6  center'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='waves-effect waves-light btn-large cyan'\n\t\t\t\t\t\tonClick={speakFunction}\n\t\t\t\t\t>\n\t\t\t\t\t\tSpeak\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className='col s6  center '>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='waves-effect waves-light btn-large purple'\n\t\t\t\t\t\tonClick={copyCode}\n\t\t\t\t\t>\n\t\t\t\t\t\tShare\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='col s12 responsive-text '>\n\t\t\t\t<p\n\t\t\t\t\tclassName='red  center'\n\t\t\t\t\tstyle={{ padding: 10, borderRadius: 8, fontSize: 9 }}\n\t\t\t\t>\n\t\t\t\t\tNolexa is merely a dumb app built on a boring sunday afternoon, I take\n\t\t\t\t\tno responsibility for whatever whoever sent you. Doesn't work on some\n\t\t\t\t\tbrowsers.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","A:\\w\\nolexa\\src\\encrypt.tsx",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":26,"column":5,"nodeType":"31","endLine":26,"endColumn":7,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"33","line":38,"column":5,"nodeType":"31","endLine":38,"endColumn":13,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":72,"column":5,"nodeType":"37","endLine":72,"endColumn":76},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'code', 'getVoices', and 'speakFunction'. Either include them or remove the dependency array.","ArrayExpression",["40"],"React Hook useEffect has missing dependencies: 'speakFunction' and 'synth.speaking'. Either include them or remove the dependency array.",["41"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},{"desc":"44","fix":"45"},"Update the dependencies array to be: [code, getVoices, speakFunction]",{"range":"46","text":"47"},"Update the dependencies array to be: [speakFunction, synth.speaking, voices]",{"range":"48","text":"49"},[796,798],"[code, getVoices, speakFunction]",[1062,1070],"[speakFunction, synth.speaking, voices]"]